#!/usr/bin/env python3

from pynput import keyboard
from pynput.keyboard import Key, Controller
from pydub import AudioSegment
from pydub.playback import play
import json
import sys
from os.path import expanduser, isfile
from time import sleep
import threading

keyboard_controller = Controller()
playingSound = False
config_path = expanduser("~") + "/.config/soundboard.json"
bindings = {}
help_key = "?"
default_config ="""{
  "bindings": [
    {
      "key": "f1",
      "sound": "PATH/TO/FILE",
      "name": "NAME",
      "repeat": 1,
      "start": 0,
      "end": 100
    }
  ],
  "help": "`"
}"""

# User friendly form of key names
special_keys = {Key.f1: 'f1',
        Key.f2: 'f2',
        Key.f3: 'f3',
        Key.f4: 'f4',
        Key.f5: 'f5',
        Key.f6: 'f6',
        Key.f7: 'f7',
        Key.f8: 'f8',
        Key.f9: 'f9',
        Key.f10: 'f10',
        Key.f11: 'f11',
        Key.f12: 'f12',
        Key.esc: 'esc',
        Key.tab: 'tab',
        Key.caps_lock: 'caps_lock',
        Key.shift: 'shift',
        Key.ctrl: 'ctrl',
        Key.cmd: 'cmd',
        Key.alt: 'alt',
        Key.backspace: 'backspace',
        Key.enter: 'enter',
        Key.shift_r: 'shift_r',
        Key.ctrl_r: 'ctrl_r',
        Key.menu: 'menu',
        Key.alt_r: 'alt_r',
        Key.print_screen: 'print_screen',
        Key.scroll_lock: 'scroll_lock',
        Key.pause: 'pause',
        Key.insert: 'insert',
        Key.home: 'home',
        Key.page_up: 'page_up',
        Key.page_down: 'page_down',
        Key.delete: 'delete',
        Key.end: 'end',
        Key.num_lock: 'num_lock',
        Key.up: 'up',
        Key.left: 'left',
        Key.right: 'right',
        Key.down: 'down'}

def load_config(data):
    data = json.load(config)
    i = 1
    for binding in data['bindings']:
        # Load in audio clip bindings from file
        try:
            key = binding['key']
        except KeyError:
            print(f'Missing key in binding {i}')
            sys.exit(1)
        try:
            sound = binding['sound']
        except KeyError:
            print(f'Missing sound in binding {i}')
            sys.exit(1)
        try:
            name = binding['name']
        except KeyError:
            name = None
        try:
            repeat = binding['repeat']
            if not isinstance(repeat, int):
                print(f'Repeat is not number in binding {i}')
                sys.exit(1)
            elif repeat < 1:
                print(f'Repeat is less than 1 in binding {i}')
                sys.exit(1)

        except KeyError:
            repeat = 1
        try:
            volume = binding['volume']
            if not isinstance(volume, int):
                print(f'Volume is not number in binding {i}')
                sys.exit(1)
        except KeyError:
            volume = 0
        try:
            start = binding['start']
            if not isinstance(start, int):
                print(f'Start is not number in binding {i}')
                sys.exit(1)
        except KeyError:
            start = None
        try:
            end = binding['end']
            if not isinstance(end, int):
                print(f'End is not number in binding {i}')
                sys.exit(1)
        except KeyError:
            end = None
        try:
            audio_segment = AudioSegment.from_file(sound)
        except FileNotFoundError:
            print(f'Sound file does not exist in binding {i}')
            sys.exit(1)

        bindings[key] = (name, sound, audio_segment, repeat, volume, start, end)
        i+=1

    try:
        global help_key
        help_key = data['help']
    except KeyError:
        pass

try:
    with open(config_path) as config:
        load_config(config)
# Create default file if config missing
except FileNotFoundError:
    print(f"Config at {config_path} does not exist, default file created")
    with open(config_path, "w+") as config:
        config.write(default_config)
    sys.exit(1)

# Print out debug key names
def key_names(key):
    try:
        print('alphanumeric key {0} pressed'.format(
            key.char))
    except AttributeError:
        print('special key {0} pressed'.format(
            key))

def play_song(song, repeat, volume, start, end):
    global playingSound
    playingSound = True
    # Splice the audio clip
    if start != None and end == None:
        song = song[start:]
    elif start == None and end != None:
        song = song[:end]
    elif start != None and end != None:
        song = song[start:end]
    # Apply effects after slicing to avoid being cut
    play((song * repeat) + volume)
    playingSound = False

def help_screen():
    for key in bindings:
        print(f"{key}: {bindings[key][0]}: {bindings[key][1]}")

def on_press(key):
    # Handle keys with char forms
    try:
        # Show Help
        if key.char == help_key:
            help_screen()
        # Play sound
        elif key.char in bindings and playingSound == False:
            binding = bindings[key.char]
            th = threading.Thread(target=play_song, args=(
                binding[2], binding[3], binding[4], binding[5], binding[6]))
            th.start()
    # Handle other keys
    except AttributeError:
        if key in special_keys:
            key = special_keys[key]
        # Show help
        if key == help_key:
            help_screen()
        # Play sound
        elif key in bindings and playingSound == False:
            binding = bindings[key]
            th = threading.Thread(target=play_song, args=(
                binding[2], binding[3], binding[4], binding[5], binding[6]))
            th.start()

listener = None
# Collect events until released
while True:
    if listener == None:
        listener = keyboard.Listener(
                on_press=on_press)
        listener.start()
