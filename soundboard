#!/usr/bin/env python3
from pynput import keyboard
from pynput.keyboard import Key, Controller
from pydub import AudioSegment
from pydub.playback import play
import json
import sys
from os.path import expanduser

keyboard_controller = Controller()
config_path = expanduser("~") + "/.config/soundboard.json"
bindings = {}
help_key = "?"

special_keys = {Key.f1: 'f1',
        Key.f2: 'f2',
        Key.f3: 'f3',
        Key.f4: 'f4',
        Key.f5: 'f5',
        Key.f6: 'f6',
        Key.f7: 'f7',
        Key.f8: 'f8',
        Key.f9: 'f9',
        Key.f10: 'f10',
        Key.f11: 'f11',
        Key.f12: 'f12'}

with open(config_path) as config:
    data = json.load(config)
    i = 1
    for binding in data['bindings']:
        try:
            key = binding['key']
        except KeyError:
            print(f'Missing key in binding {i}')
            sys.exit(1)
        try:
            sound = binding['sound']
        except KeyError:
            print('Missing sound in binding {i}')
            sys.exit(1)
        try:
            name = binding['name']
        except KeyError:
            name = None
        try:
            repeat = binding['repeat']
        except KeyError:
            repeat = 1

        try:
            audio_segment = AudioSegment.from_file(sound)
        except FileNotFoundError:
            print(f'Sound file does not exist in binding {i}')
            sys.exit(1)

        bindings[key] = (name, sound, audio_segment, repeat)
        i+=1

    try:
        help_key = data['help']
    except KeyError:
        pass


def key_names(key):
    try:
        print('alphanumeric key {0} pressed'.format(
            key.char))
    except AttributeError:
        print('special key {0} pressed'.format(
            key))

def play_song(song):
    play(song)

def help_screen():
    for key in bindings:
        print(f"{key}: {bindings[key][0]}: {bindings[key][1]}")

def on_press(key):
    try:
        if key.char == help_key:
            help_screen()
        elif key.char in bindings:
            play_song(bindings[key.char][2] * bindings[key.char][3])
    except AttributeError:
        if key in special_keys:
            key = special_keys[key]
        if key == help_key:
            help_screen()
        elif key in bindings:
            play_song(bindings[key][2] * bindings[key][3])

# Collect events until released
with keyboard.Listener(
        on_press=on_press) as listener:
    listener.join()
