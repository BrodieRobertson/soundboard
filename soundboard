#!/usr/bin/env python3
from pynput import keyboard
from pynput.keyboard import Key, Controller
from pydub import AudioSegment
from pydub.playback import play
import json
import sys
from os.path import expanduser

keyboard_controller = Controller()
config_path = expanduser("~") + "/.config/soundboard.json"
bindings = {}
help_key = "?"

# User friendly form of key names
special_keys = {Key.f1: 'f1',
        Key.f2: 'f2',
        Key.f3: 'f3',
        Key.f4: 'f4',
        Key.f5: 'f5',
        Key.f6: 'f6',
        Key.f7: 'f7',
        Key.f8: 'f8',
        Key.f9: 'f9',
        Key.f10: 'f10',
        Key.f11: 'f11',
        Key.f12: 'f12'}

with open(config_path) as config:
    data = json.load(config)
    i = 1
    for binding in data['bindings']:
        # Load in audio clip bindings from file
        try:
            key = binding['key']
        except KeyError:
            print(f'Missing key in binding {i}')
            sys.exit(1)
        try:
            sound = binding['sound']
        except KeyError:
            print(f'Missing sound in binding {i}')
            sys.exit(1)
        try:
            name = binding['name']
        except KeyError:
            name = None
        try:
            repeat = binding['repeat']
            if not isinstance(repeat, int):
                print(f'Repeat is not number in binding {i}')
                sys.exit(1)
            elif repeat < 1:
                print(f'Repeat is less than 1 in binding {i}')
                sys.exit(1)

        except KeyError:
            repeat = 1
        try:
            volume = binding['volume']
            if not isinstance(volume, int):
                print(f'Volume is not number in binding {i}')
                sys.exit(1)
        except KeyError:
            volume = 0
        try:
            start = binding['start']
            if not isinstance(start, int):
                print(f'Start is not number in binding {i}')
                sys.exit(1)
        except KeyError:
            start = None
        try:
            end = binding['end']
            if not isinstance(end, int):
                print(f'End is not number in binding {i}')
                sys.exit(1)
        except KeyError:
            end = None
        try:
            audio_segment = AudioSegment.from_file(sound)
        except FileNotFoundError:
            print(f'Sound file does not exist in binding {i}')
            sys.exit(1)

        bindings[key] = (name, sound, audio_segment, repeat, volume, start, end)
        i+=1

    try:
        help_key = data['help']
    except KeyError:
        pass

# Print out debug key names
def key_names(key):
    try:
        print('alphanumeric key {0} pressed'.format(
            key.char))
    except AttributeError:
        print('special key {0} pressed'.format(
            key))

def play_song(song, repeat, volume, start, end):
    # Splice the audio clip
    if start != None and end == None:
        song = song[start:]
    elif start == None and end != None:
        song = song[:end]
    elif start != None and end != None:
        song = song[start:end]

    # Apply effects after slicing to avoid being cut
    play((song * repeat) + volume)

def help_screen():
    for key in bindings:
        print(f"{key}: {bindings[key][0]}: {bindings[key][1]}")

def on_press(key):
    try:
        if key.char == help_key:
            help_screen()
        elif key.char in bindings:
            binding = bindings[key.char]
            play_song(binding[2], binding[3], binding[4], binding[5], binding[6])
    except AttributeError:
        if key in special_keys:
            key = special_keys[key]
        if key == help_key:
            help_screen()
        elif key in bindings:
            binding = bindings[key]
            play_song(binding[2], binding[3], binding[4], binding[5], binding[6])

# Collect events until released
with keyboard.Listener(
        on_press=on_press) as listener:
    listener.join()
